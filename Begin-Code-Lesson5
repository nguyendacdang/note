Lesson 5 - Statistical analysis of time series

5.3 - Global statistics
	- df1 = Date , SPY, XOM , GOOG, GLD
	- stat = df1.mean() => mean theo các cột SPY, XOM, GOOG, GLD
	- Global statistics: mean, median, std, sum, prod, mode
	
5.4 - Compute global statistics:

5.5 - Rolling statistics
	- Thống kê trong 1 khoảng thời gian ( khoảng giá trị ) 
	- Như global mean sẽ là tính trung bình của set data
		rolling 20 bin mean sẽ là lấy trung bình của 20 điểm data
		+ 20: gọi là window
	- Rolling mean statistics: được gọi là moving average. ( trung bình trượt) 

5.6 - Khi muốn xác định cực đại ( hoặc cực trị) trong dự đoán, sử dụng rolling standard deviation

5.7 - Bollinger bands
	
	- Câu hỏi đặt ra: Làm sao chúng ta có thể biết được độ lệch từ rolling mean là đủ có ý nghĩa
		đảm bảo cho tín hiệu giao dịch ? => Sử dụng Bollinger Bands
		
	- Bollinger Bands: + Quan sát sự biến động gần đây của stock
		+ Nếu rất dễ thay đổi, biến động ( dạng sin hoặc sóng ), chúng ta có thể bỏ qua các movements 
			trên hoặc dưới mean
		+ Bollinger bands: là tính giá trị rolling mean của data, sau đó tạo ra 1 dải trên = mean + 2std
			và dải dưới = mean - 2std. Rồi quan sát data trong dải đó.
	
5.8 - Computing Rolling Statistics
	- sử dụng pandas.stats.moments.rolling_mean
	#Code:
		get Data: df = get_data(symbols, dates)
		#Plot SPY data, retain matplotlib axis object
		ax = df['SPY'].plot(title="SPY Rolling Mean", label='SPY')
		#Compute rolling mean 
		rm_SPY = pd.rolling_mean(df['SPY'], window=20)
		#Add rolling mean to same plot
		rm_SPY.plot(lable="rolling", ax = ax)
	
	
	#Code sử dụng 
		"""Bollinger Bands."""

			import os
			import pandas as pd
			import matplotlib.pyplot as plt

			def symbol_to_path(symbol, base_dir="data"):
				"""Return CSV file path given ticker symbol."""
				return os.path.join(base_dir, "{}.csv".format(str(symbol)))


			def get_data(symbols, dates):
				"""Read stock data (adjusted close) for given symbols from CSV files."""
				df = pd.DataFrame(index=dates)
				if 'SPY' not in symbols:  # add SPY for reference, if absent
					symbols.insert(0, 'SPY')

				for symbol in symbols:
					df_temp = pd.read_csv(symbol_to_path(symbol), index_col='Date',
							parse_dates=True, usecols=['Date', 'Adj Close'], na_values=['nan'])
					df_temp = df_temp.rename(columns={'Adj Close': symbol})
					df = df.join(df_temp)
					if symbol == 'SPY':  # drop dates SPY did not trade
						df = df.dropna(subset=["SPY"])

				return df


			def plot_data(df, title="Stock prices"):
				"""Plot stock prices with a custom title and meaningful axis labels."""
				ax = df.plot(title=title, fontsize=12)
				ax.set_xlabel("Date")
				ax.set_ylabel("Price")
				plt.show()


			def get_rolling_mean(values, window):
				"""Return rolling mean of given values, using specified window size."""
				return values.rolling(window=window, center=False).mean()


			def get_rolling_std(values, window):
				"""Return rolling standard deviation of given values, using specified window size."""
				return values.rolling(window=window, center=False).std()


			def get_bollinger_bands(rm, rstd):
				"""Return upper and lower Bollinger Bands."""
				upper_band = rm + 2*rstd
				lower_band = rm - 2*rstd
				return upper_band, lower_band


			def test_run():
				# Read data
				dates = pd.date_range('2012-01-01', '2012-12-31')
				symbols = ['SPY']
				df = get_data(symbols, dates)

				# Compute Bollinger Bands
				# 1. Compute rolling mean
				rm_SPY = get_rolling_mean(df['SPY'], window=20)

				# 2. Compute rolling standard deviation
				rstd_SPY = get_rolling_std(df['SPY'], window=20)

				# 3. Compute upper and lower bands
				upper_band, lower_band = get_bollinger_bands(rm_SPY, rstd_SPY)
				
				# Plot raw SPY values, rolling mean and Bollinger Bands
				ax = df['SPY'].plot(title="Bollinger Bands", label='SPY')
				rm_SPY.plot(label='Rolling mean', ax=ax)
				upper_band.plot(label='upper band', ax=ax)
				lower_band.plot(label='lower band', ax=ax)

				# Add axis labels and legend
				ax.set_xlabel("Date")
				ax.set_ylabel("Price")
				ax.legend(loc='upper left')
				plt.show()


			if __name__ == "__main__":
				test_run()

5.10 - Daily returns:
	- Daily returns: daily_return[t] = (price[t]/price[t-1]) - 1
	( tính sự chênh lệch về giá, tăng giảm bao nhiêu phần trăm theo các ngày so với yesterday)
5.11 - 